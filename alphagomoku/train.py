# coding:utf-8
import json
import os
import time
import traceback

import torch
import torch.nn.functional as F
from torch import nn, optim, cuda
from torch.optim.lr_scheduler import MultiStepLR
from torch.utils.data import DataLoader

from mcts import AlphaZeroMCTS
from board import Board
from pol_val_net import PolicyValueNet
from selfplay import SelfPlayData, SelfPlayDataSet


def exception_handler(train_func):
    """ Exception handling decorator """
    def wrapper(train_pipe_line, *args, **kwargs):
        try:
            train_func(train_pipe_line)
        except BaseException as e:
            if not isinstance(e, KeyboardInterrupt):
                traceback.print_exc()

            t = time.strftime('%Y-%m-%d_%H-%M-%S', time.localtime(time.time()))
            train_pipe_line.save_model(f'last_policy_value_net_{t}.pth', 'train_losses', 'games')

    return wrapper


class PolicyValueLoss(nn.Module):
    """ Compute loss based on `z` and `π` generated from self-play """

    def __init__(self):
        super().__init__()

    def forward(self, p_hat, pi, value, z):
        """ Forward pass

        Parameters
        ----------
        p_hat: Tensor of shape (N, board_len^2)
            Log action probability vector

        pi: Tensor of shape (N, board_len^2)
            Action probability vector generated by MCTS

        value: Tensor of shape (N, )
            Estimated value for each board state

        z: Tensor of shape (N, )
            Reward for each player based on the final game result
        """
        value_loss = F.mse_loss(value, z)
        policy_loss = -torch.sum(pi * p_hat, dim=1).mean()
        loss = value_loss + policy_loss
        return loss


class TrainModel:
    """ Training Model """

    def __init__(self, board_len=9, lr=0.01, n_self_plays=1500, n_mcts_iters=500,
                 n_feature_planes=4, batch_size=500, start_train_size=500, check_frequency=100,
                 n_test_games=10, c_puct=4, is_use_gpu=True, is_save_game=False, **kwargs):
        """
        Parameters
        ----------
        board_len: int
            Board size

        lr: float
            Learning rate

        n_self_plays: int
            Number of self-play games

        n_mcts_iters: int
            Number of MCTS iterations

        n_feature_planes: int
            Number of feature planes

        batch_size: int
            Mini-batch size

        start_train_size: int
            Minimum dataset size to start training the model

        check_frequency: int
            Frequency of testing the model

        n_test_games: int
            Number of games played against the historical best model during testing

        c_puct: float
            Exploration constant

        is_use_gpu: bool
            Whether to use GPU

        is_save_game: bool
            Whether to save self-play game records
        """
        self.c_puct = c_puct
        self.is_use_gpu = is_use_gpu
        self.batch_size = batch_size
        self.n_self_plays = n_self_plays
        self.n_test_games = n_test_games
        self.n_mcts_iters = n_mcts_iters
        self.is_save_game = is_save_game
        self.check_frequency = check_frequency
        self.start_train_size = start_train_size
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.chess_board = Board(board_len, n_feature_planes)

        # Create policy-value network and Monte Carlo Tree Search (MCTS)
        self.policy_value_net = self.__get_policy_value_net(board_len)
        self.mcts = AlphaZeroMCTS(self.policy_value_net, c_puct=c_puct, n_iters=n_mcts_iters, is_self_play=True)

        # Create optimizer and loss function
        self.optimizer = optim.Adam(self.policy_value_net.parameters(), lr=lr, weight_decay=1e-4)
        self.criterion = PolicyValueLoss()
        self.lr_scheduler = MultiStepLR(self.optimizer, [1500, 2500], gamma=0.1)

        # Create dataset
        self.dataset = SelfPlayDataSet(board_len)

        # Record data
        self.train_losses = self.__load_data('log/train_losses.json')
        self.games = self.__load_data('log/games.json')

    def __self_play(self):
        """ Play one self-play game

        Returns
        -------
        self_play_data: namedtuple
            Self-play data containing the following three components:
            * `pi_list`: List of action probability vectors π generated by MCTS
            * `z_list`: List of rewards for each move based on the final game result for each player
            * `feature_planes_list`: List of feature planes corresponding to each move in the game
        """
        # Initialize the board and data containers
        self.policy_value_net.eval()
        self.chess_board.clear_board()
        pi_list, feature_planes_list, players = [], [], []
        action_list = []

        # Start a game
        while True:
            action, pi = self.mcts.get_action(self.chess_board)

            # Save data for each move
            feature_planes_list.append(self.chess_board.get_feature_planes())
            players.append(self.chess_board.current_player)
            action_list.append(action)
            pi_list.append(pi)
            self.chess_board.do_action(action)

            # Check if the game is over
            is_over, winner = self.chess_board.is_game_over()
            if is_over:
                if winner is not None:
                    z_list = [1 if i == winner else -1 for i in players]
                else:
                    z_list = [0] * len(players)
                break

        # Reset the root node
        self.mcts.reset_root()

        # Return data
        if self.is_save_game:
            self.games.append(action_list)

        self_play_data = SelfPlayData(pi_list=pi_list, z_list=z_list, feature_planes_list=feature_planes_list)
        return self_play_data

    @exception_handler
    def train(self):
        """ Train the model """
        for i in range(self.n_self_plays):
            print(f'🏹 Playing self-play game number {i+1}...')
            self.dataset.append(self.__self_play())

            # If the dataset size exceeds start_train_size, perform one training iteration
            if len(self.dataset) >= self.start_train_size:
                data_loader = iter(DataLoader(self.dataset, self.batch_size, shuffle=True, drop_last=False))
                print('💊 Starting training...')

                self.policy_value_net.train()
                # Randomly select a batch of data to train to prevent overfitting
                feature_planes, pi, z = next(data_loader)
                feature_planes = feature_planes.to(self.device)
                pi, z = pi.to(self.device), z.to(self.device)
                for _ in range(5):
                    # Forward pass
                    p_hat, value = self.policy_value_net(feature_planes)
                    # Clear gradients
                    self.optimizer.zero_grad()
                    # Calculate loss
                    loss = self.criterion(p_hat, pi, value.flatten(), z)
                    # Backpropagate the error
                    loss.backward()
                    # Update parameters
                    self.optimizer.step()
                    # Apply learning rate decay
                    self.lr_scheduler.step()

                # Record loss
                self.train_losses.append([i, loss.item()])
                print(f"🚩 train_loss = {loss.item():<10.5f}\n")

            # Test the model
            if (i + 1) % self.check_frequency == 0:
                self.__test_model()
                
        self.save_model('final_policy_value_net', 'train_losses', 'games')

    def __test_model(self):
        """ Test the model """
        os.makedirs('model', exist_ok=True)

        model_path = 'model/best_policy_value_net.pth'

        # If the best model does not exist, save the current model as the best model
        if not os.path.exists(model_path):
            torch.save(self.policy_value_net, model_path)
            return

        # Load the historical best model
        best_model = torch.load(model_path)  # type:PolicyValueNet
        best_model.eval()
        best_model.set_device(self.is_use_gpu)
        mcts = AlphaZeroMCTS(best_model, self.c_puct, self.n_mcts_iters)
        self.mcts.set_self_play(False)
        self.policy_value_net.eval()

        # Start the match
        print('🩺 Testing the current model...')
        n_wins = 0
        for i in range(self.n_test_games):
            self.chess_board.clear_board()
            self.mcts.reset_root()
            mcts.reset_root()
            while True:
                # Current model makes a move
                is_over, winner = self.__do_mcts_action(self.mcts)
                if is_over:
                    n_wins += int(winner == Board.BLACK)
                    break
                # Historical best model makes a move
                is_over, winner = self.__do_mcts_action(mcts)
                if is_over:
                    break

        # If win rate is greater than 55%, save the current model as the best model
        win_prob = n_wins / self.n_test_games
        if win_prob > 0.55:
            torch.save(self.mcts.policy_value_net, model_path)
            print(f'🥇 Saved the current model as the best model, current model win rate: {win_prob:.1%}\n')
        else:
            print(f'🎃 Keeping the historical best model unchanged, current model win rate: {win_prob:.1%}\n')

        self.mcts.set_self_play(True)

    def save_model(self, model_name: str, loss_name: str, game_name: str):
        """ Save the model

        Parameters
        ----------
        model_name: str
            Model file name without extension

        loss_name: str
            Loss file name without extension

        game_name: str
            Self-play game record name without extension
        """
        os.makedirs('model', exist_ok=True)

        path = f'model/{model_name}.pth'
        self.policy_value_net.eval()
        torch.save(self.policy_value_net, path)
        print(f'🎉 Current model has been saved to {os.path.join(os.getcwd(), path)}')

        # Save data
        with open(f'log/{loss_name}.json', 'w', encoding='utf-8') as f:
            json.dump(self.train_losses, f)

        if self.is_save_game:
            with open(f'log/{game_name}.json', 'w', encoding='utf-8') as f:
                json.dump(self.games, f)

    def __do_mcts_action(self, mcts):
        """ Get an action """
        action = mcts.get_action(self.chess_board)
        self.chess_board.do_action(action)
        is_over, winner = self.chess_board.is_game_over()
        return is_over, winner

    def __get_policy_value_net(self, board_len=9):
        """ Create the policy-value network; if a historical best model exists, load it directly """
        os.makedirs('model', exist_ok=True)

        best_model = 'best_policy_value_net.pth'
        history_models = sorted([i for i in os.listdir('model') if i.startswith('last')])

        # Select the latest model from historical models
        model = history_models[-1] if history_models else best_model
        model = f'model/{model}'
        if os.path.exists(model):
            print(f'💎 Loading model {model} ...\n')
            net = torch.load(model).to(self.device)  # type:PolicyValueNet
            net.set_device(self.is_use_gpu)
        else:
            net = PolicyValueNet(n_feature_planes=self.chess_board.n_feature_planes,
                                 is_use_gpu=self.is_use_gpu, board_len=board_len).to(self.device)

        return net

    def __load_data(self, path: str):
        """ Load historical loss data """
        data = []
        try:
            with open(path, encoding='utf-8') as f:
                data = json.load(f)
        except:
            os.makedirs('log', exist_ok=True)

        return data